@page "/"
@rendermode InteractiveServer

<style type="text/css">
    .mud-table-head .header-centered th {
        text-align: center;
        font-size: 1.2em;
    }

   .mud-table-foot .bold-text .mud-table-cell {
       font-weight: 500;
   }
</style>
<PageTitle>Upload File:</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true" Style="text-align: center;">Dashboard</MudText>



<MudFileUpload T="IBrowserFile" Accept=".csv" FilesChanged="UploadFiles2">
    <ActivatorContent>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.CloudUpload">
            Upload csv
        </MudButton>
    </ActivatorContent>
</MudFileUpload>




    <h1>Most active User:</h1>
    @if(createdHashDictionary)
    {
        
            @foreach(KeyValuePair<string, List<ReaderEvent>> i in hashDic)
                {
                    if(i.Value.Count > mostActiveUserCount)
                    {
                        mostActiveUserCount = i.Value.Count;
                        mostActiveUser = i.Key;
                    }
                }
            <p>@mostActiveUser</p>
        
    }

    <h1>Most active Reader:</h1>
    @if(createdDictionary)
        {
            
                
                @foreach(KeyValuePair<string, List<ReaderEvent>> i in dic)
                    {
                        if(i.Value.Count > mostActiveReaderCount)
                        {
                            mostActiveReaderCount = i.Value.Count;
                            mostActiveReaderName = i.Value[0].reader;
                        }
                    }
                <p>@mostActiveReaderName</p>   
                
            
        }

    <h1>Busiest Day of the Week:</h1>
    @if(createdDayOfWeekDictionary)
    {
        
        @foreach(KeyValuePair<string, List<ReaderEvent>> i in dayOfWeekDic)
            {
                if(i.Value.Count > busiestDayCount)
                {
                    busiestDayCount = i.Value.Count;
                    busiestDayOfWeek = i.Key;
                }
            }
            <p>@busiestDayOfWeek</p>
     
    }

    <h1>Average unique Users per day:</h1>
    @if(createdDateDictionary)
    {

        List<int> uniqueHashesForDay = new List<int>();
        int averageUniqueUsers = 0;
        
        @foreach(var day in dateDic.Keys)
        {
            List<string> seenHashes = new List<string>();

            foreach(ReaderEvent r in dateDic[day])
            {
                if(!seenHashes.Contains(r.getHash()))
                {
                    seenHashes.Add(r.getHash());
                }
            }

            uniqueHashesForDay.Add(seenHashes.Count());
            
            
        }
        foreach(int i in uniqueHashesForDay)
            {
                averageUniqueUsers += i;
            }
            
        averageUniqueUsers = averageUniqueUsers / uniqueHashesForDay.Count();
        <p>@averageUniqueUsers</p>
        
    }

    @if(dupeCount > 0)
    {
       <p>@dupeCount duplicates</p> 
    }
    
    @if(initializedChartSeries)
    {

        <MudChart ChartType="ChartType.Line" ChartSeries="@series" @bind-SelectedIndex="@index" XAxisLabels="@xAxisLabels" Width="1500px" Height="550px" ChartOptions="@options" AxisChartOptions="@axisChartOptions" />
    }

    






@code {
    public bool createdDictionary = false;
    public bool createdDayOfWeekDictionary = false;
    public bool createdHashDictionary = false;
    public string FileName { get; set; } = "";
    public long FileSize { get; set; }
    public string FileType { get; set; } = "";
    public DateTimeOffset LastModified { get; set; }
    public string ErrorMessage { get; set; } = "";
    private static List<ReaderEvent> masterList = new List<ReaderEvent>();
    private static Dictionary<string, List<ReaderEvent>> dic = new Dictionary<string, List<ReaderEvent>>();
    private static Dictionary<string, List<ReaderEvent>> hashDic = new Dictionary<string, List<ReaderEvent>>();
    private static Dictionary<string, List<ReaderEvent>> dayOfWeekDic = new Dictionary<string, List<ReaderEvent>>();
    private static Dictionary<string, List<ReaderEvent>> dateDic = new Dictionary<string, List<ReaderEvent>>();
    private int mostActiveReaderCount = 0;
    private string mostActiveReaderName = "";
    private string mostActiveUser = "";
    private int mostActiveUserCount = 0;
    private double[] eventCounts = new double[7];
    private double busiestDayCount = 0;
    private string busiestDayOfWeek = "";
    private bool createdDateDictionary = false;
    
    private int index = -1; 
    private ChartOptions options = new ChartOptions();
    private AxisChartOptions axisChartOptions = new AxisChartOptions();

    private List<ChartSeries> series = new List<ChartSeries>()
    {};
    private string[] xAxisLabels = {};
    private bool initializedChartSeries = false;
    private int dupeCount = 0;

    const int MAX_FILESIZE = 10000000;


    IList<IBrowserFile> files = new List<IBrowserFile>();
     private async void UploadFiles2(IBrowserFile file)
     {
        files.Add(file);
        await FileUploaded(file);
 
     }
  


     public async Task FileUploaded(IBrowserFile e)
     {
         var browserFile = e;


         if (browserFile != null)
         {
             FileSize = browserFile.Size;
             FileType = browserFile.ContentType;
             FileName = browserFile.Name;
             LastModified = browserFile.LastModified;


             try
             { //save and upload file to the disk
                 var fileStream = browserFile.OpenReadStream(MAX_FILESIZE);
                 var destinationStream = new FileStream(FileName, FileMode.Create);
                 await fileStream.CopyToAsync(destinationStream);
                 destinationStream.Close();


                //create stream reader and begin reading lines
                 StreamReader sr = new StreamReader(FileName);
                 string? line = sr.ReadLine();
                 string? previousLine = "";
                 
                 while((line = sr.ReadLine()) != null)
                 {

                    if(line.Equals(previousLine))
                        {
                            dupeCount++;
                        }

                    else
                    {
                        string[] data = line.Split(",");
                        masterList.Add(new ReaderEvent(data[0], data[1], data[2], data[3], data[4], data[5]));
                    }
                    
                    previousLine = line;
                 }

                 makeDictionary(masterList);
                 dayOfTheWeekDictionary(masterList);
                 makeHashDictionary(masterList);
                 dateDictionary(masterList);
                 initializeChartSeries();
                 
                 
             }
             catch (Exception exception)
             {
                 ErrorMessage = exception.Message;
             }
         }
     }

      public Dictionary<string, List<ReaderEvent>> dayOfTheWeekDictionary(List<ReaderEvent> bigList)
        {
            foreach(ReaderEvent r in bigList)
            {
                
                if(!dayOfWeekDic.ContainsKey(r.getDate().ToString("dddd")))
                {
                    dayOfWeekDic.Add(r.getDate().ToString("dddd"), new List<ReaderEvent>());
                }
                dayOfWeekDic[r.getDate().ToString("dddd")].Add(r);
               
            }
            createdDayOfWeekDictionary = true;
            StateHasChanged();
            return dayOfWeekDic;
        } 

      public Dictionary<string, List<ReaderEvent>> dateDictionary(List<ReaderEvent> bigList)
        {
            foreach(ReaderEvent r in bigList)
            {
                
                if(!dateDic.ContainsKey(r.getDate().ToString("MMM dd")))
                {
                    dateDic.Add(r.getDate().ToString("MMM dd"), new List<ReaderEvent>());
                }
                dateDic[r.getDate().ToString("MMM dd")].Add(r);
               
            }

            createdDateDictionary = true;
            StateHasChanged();
            return dateDic;
        } 
     
     public Dictionary<string, List<ReaderEvent>> makeDictionary(List<ReaderEvent> bigList)
        {
            foreach(ReaderEvent r in bigList)
            {
                if(!dic.ContainsKey(r.getReaderID()))
                {
                    dic.Add(r.getReaderID(), new List<ReaderEvent>());
                }
                dic[r.getReaderID()].Add(r);
               
            }
            createdDictionary = true;
            StateHasChanged();
            return dic;
        }

     public Dictionary<string, List<ReaderEvent>> makeHashDictionary(List<ReaderEvent> bigList)
        {
            foreach(ReaderEvent r in bigList)
            {
                if(!hashDic.ContainsKey(r.getHash()))
                {
                    hashDic.Add(r.getHash(), new List<ReaderEvent>());
                }
                hashDic[r.getHash()].Add(r);
               
            }
            createdHashDictionary = true;
            StateHasChanged();
            return hashDic;
        }

    public void initializeChartSeries()
        {
            axisChartOptions.MatchBoundsToSize = true;
            xAxisLabels = dateDic.Keys.ToArray();

            List<ReaderEvent>[] pullArrayOfEvents = dateDic.Values.ToArray();
            List<double> listOfEventsForEachDayOfTheWeek = new List<double>();

            foreach(List<ReaderEvent> relist in pullArrayOfEvents)
                {
                    listOfEventsForEachDayOfTheWeek.Add(relist.Count());
                }

            series.Add(new ChartSeries { Name = "Number of Scans", Data = listOfEventsForEachDayOfTheWeek.ToArray() } );
            initializedChartSeries = true;
            StateHasChanged();
        }

     


     public class ReaderEvent
     {
        public DateTime date;
        public string site;
        public string reader;
        public string hash;
        public string devid;
        public string machine;




        public ReaderEvent(string reportedDate, string reportedSite, string reportedReader, string reportedHash, string reportedDevid, string reportedMachine)
        {
            date = DateTime.Parse(reportedDate);;
            site = reportedSite;
            reader = reportedReader;
            hash = reportedHash;
            devid = reportedDevid;
            machine = reportedMachine;


        }
        public string getReaderID() => devid + machine;
       


        public DateTime getDate() => date;
        public string getSite() => site;
        public string getReader() => reader;
        public string getHash() => hash;
        public string getDevid() => devid;
        public string getMachine() => machine;






     }



 
}
